// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// points_within2
SEXP points_within2(SEXP x_R, SEXP se_R, SEXP fi_R, SEXP return_list_R, SEXP return_unique_R, SEXP return_point_counts_R);
RcppExport SEXP _Regionvelocity_points_within2(SEXP x_RSEXP, SEXP se_RSEXP, SEXP fi_RSEXP, SEXP return_list_RSEXP, SEXP return_unique_RSEXP, SEXP return_point_counts_RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x_R(x_RSEXP);
    Rcpp::traits::input_parameter< SEXP >::type se_R(se_RSEXP);
    Rcpp::traits::input_parameter< SEXP >::type fi_R(fi_RSEXP);
    Rcpp::traits::input_parameter< SEXP >::type return_list_R(return_list_RSEXP);
    Rcpp::traits::input_parameter< SEXP >::type return_unique_R(return_unique_RSEXP);
    Rcpp::traits::input_parameter< SEXP >::type return_point_counts_R(return_point_counts_RSEXP);
    rcpp_result_gen = Rcpp::wrap(points_within2(x_R, se_R, fi_R, return_list_R, return_unique_R, return_point_counts_R));
    return rcpp_result_gen;
END_RCPP
}
// balanced_knn
arma::sp_mat balanced_knn(const arma::mat& d, int k, int maxl, bool returnDistanceValues, int nthreads);
RcppExport SEXP _Regionvelocity_balanced_knn(SEXP dSEXP, SEXP kSEXP, SEXP maxlSEXP, SEXP returnDistanceValuesSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type maxl(maxlSEXP);
    Rcpp::traits::input_parameter< bool >::type returnDistanceValues(returnDistanceValuesSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(balanced_knn(d, k, maxl, returnDistanceValues, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// arma_mat_cor
arma::mat arma_mat_cor(const arma::mat& m);
RcppExport SEXP _Regionvelocity_arma_mat_cor(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_mat_cor(m));
    return rcpp_result_gen;
END_RCPP
}
// colDeltaCor
arma::mat colDeltaCor(const arma::mat& e, const arma::mat& d, int nthreads);
RcppExport SEXP _Regionvelocity_colDeltaCor(SEXP eSEXP, SEXP dSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type e(eSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(colDeltaCor(e, d, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// colDeltaCorSqrt
arma::mat colDeltaCorSqrt(const arma::mat& e, const arma::mat& d, int nthreads);
RcppExport SEXP _Regionvelocity_colDeltaCorSqrt(SEXP eSEXP, SEXP dSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type e(eSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(colDeltaCorSqrt(e, d, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// colDeltaCorLog10
arma::mat colDeltaCorLog10(const arma::mat& e, const arma::mat& d, double pseudocount, int nthreads);
RcppExport SEXP _Regionvelocity_colDeltaCorLog10(SEXP eSEXP, SEXP dSEXP, SEXP pseudocountSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type e(eSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type pseudocount(pseudocountSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(colDeltaCorLog10(e, d, pseudocount, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// colEuclid
arma::mat colEuclid(const arma::mat& e, const arma::mat& p, int nthreads);
RcppExport SEXP _Regionvelocity_colEuclid(SEXP eSEXP, SEXP pSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type e(eSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(colEuclid(e, p, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// embArrows
arma::mat embArrows(const arma::mat& emb, const arma::sp_mat& tp, double arrowScale, int nthreads);
RcppExport SEXP _Regionvelocity_embArrows(SEXP embSEXP, SEXP tpSEXP, SEXP arrowScaleSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type emb(embSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type tp(tpSEXP);
    Rcpp::traits::input_parameter< double >::type arrowScale(arrowScaleSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(embArrows(emb, tp, arrowScale, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// expectedExpressionShift
arma::mat expectedExpressionShift(const arma::mat& e, const arma::sp_mat& tp, int scale, double pseudocount, int nthreads);
RcppExport SEXP _Regionvelocity_expectedExpressionShift(SEXP eSEXP, SEXP tpSEXP, SEXP scaleSEXP, SEXP pseudocountSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type e(eSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type tp(tpSEXP);
    Rcpp::traits::input_parameter< int >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type pseudocount(pseudocountSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(expectedExpressionShift(e, tp, scale, pseudocount, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// flatLength
double flatLength(NumericMatrix m);
RcppExport SEXP _Regionvelocity_flatLength(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(flatLength(m));
    return rcpp_result_gen;
END_RCPP
}
// groupMotifs
DataFrame groupMotifs(DataFrame df, int msize);
RcppExport SEXP _Regionvelocity_groupMotifs(SEXP dfSEXP, SEXP msizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< int >::type msize(msizeSEXP);
    rcpp_result_gen = Rcpp::wrap(groupMotifs(df, msize));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Regionvelocity_points_within2", (DL_FUNC) &_Regionvelocity_points_within2, 6},
    {"_Regionvelocity_balanced_knn", (DL_FUNC) &_Regionvelocity_balanced_knn, 5},
    {"_Regionvelocity_arma_mat_cor", (DL_FUNC) &_Regionvelocity_arma_mat_cor, 1},
    {"_Regionvelocity_colDeltaCor", (DL_FUNC) &_Regionvelocity_colDeltaCor, 3},
    {"_Regionvelocity_colDeltaCorSqrt", (DL_FUNC) &_Regionvelocity_colDeltaCorSqrt, 3},
    {"_Regionvelocity_colDeltaCorLog10", (DL_FUNC) &_Regionvelocity_colDeltaCorLog10, 4},
    {"_Regionvelocity_colEuclid", (DL_FUNC) &_Regionvelocity_colEuclid, 3},
    {"_Regionvelocity_embArrows", (DL_FUNC) &_Regionvelocity_embArrows, 4},
    {"_Regionvelocity_expectedExpressionShift", (DL_FUNC) &_Regionvelocity_expectedExpressionShift, 5},
    {"_Regionvelocity_flatLength", (DL_FUNC) &_Regionvelocity_flatLength, 1},
    {"_Regionvelocity_groupMotifs", (DL_FUNC) &_Regionvelocity_groupMotifs, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_Regionvelocity(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
